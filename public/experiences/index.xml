<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiences on Jeff&#39;s Resume</title>
    <link>https://orangebike.dev/experiences/</link>
    <description>Recent content in Experiences on Jeff&#39;s Resume</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://orangebike.dev/experiences/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kustomize</title>
      <link>https://orangebike.dev/experiences/kustomize/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/kustomize/</guid>
      <description>Kustomize is a Go-based open-source cluster configuration management tool for kubernetes.
I founded the project, leading it to 6500 github stars and over 100 contributors.
In kubernetes, one declares the state of all cluster objects in files, then applies those files to the cluster, where controllers drive objects to their newly desired states. To change the cluster one edits the files and reapplies them. This creates a new problem: how to manage hundreds of variants of cluster configs.</description>
    </item>
    
    <item>
      <title>Terra Bella</title>
      <link>https://orangebike.dev/experiences/terrabella/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/terrabella/</guid>
      <description>Terra Bella (now Planet) is a satellite-based Earth imaging service.
I joined Terra Bella (formerly Skybox) after its acquisition by Google. I owned a java-based service that produced a satellite command stream based on constraints around imaging and communication opportunities (it used Google spanner and flume). I also worked on orbitology software (orbit prediction from TLE), integrating it into Google systems. I worked to improve CI/CD, allow rollbacks, conduct post-mortems, etc.</description>
    </item>
    
    <item>
      <title>Vanadium</title>
      <link>https://orangebike.dev/experiences/vanadium/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/vanadium/</guid>
      <description>Vanadium lets distributed services find each other, securely communicate, and delegate authority using public-key cryptography.
I contributed to the Go libraries and overall project organization, wrote extensive, tested tutorials, worked closely with UX research to validate the educational material, and built demos. One such demo is volley, a distributed OpenGL app for iOS, Android, OS X, and X11 (linux) written in Go that demonstrates vanadium&amp;rsquo;s cross platform power (code).
Vanadium and kubernetes (k8s) started about the same time, approaching distributed computing from very different directions.</description>
    </item>
    
    <item>
      <title>Helpouts</title>
      <link>https://orangebike.dev/experiences/helpouts/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/helpouts/</guid>
      <description>Google Helpouts was Google&amp;rsquo;s attempt to turn video chat into a small business platform.
Google could offer the user a chance to buy time with a human expert, anywhere in the world.
I worked on the Android app and the java-based REST API it talked to, arranged for consumer and provider notifications using Google infra, and did Google search &amp;ldquo;failed query&amp;rdquo; integration that presented a Helpouts onebox, and did user studies at random locations in Palo Alto to test our mobile UX.</description>
    </item>
    
    <item>
      <title>G&#43; Games</title>
      <link>https://orangebike.dev/experiences/games/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/games/</guid>
      <description>Google+ Games launched when FarmVille was in its prime.
I was TLM, coordinating my team&amp;rsquo;s work with extended teams engaged in various aspects of G+ (stream, auth, privacy, and API).
My team built the most complex part of the G+ web client, as it had to mitigate the risk of allowing 3rd party apps to run on Google domains. To do so, we launched the first aspect of the G+ API to games developers (contact sharing), preceding what came second (activity stream listing) by over a year.</description>
    </item>
    
    <item>
      <title>iGoogle</title>
      <link>https://orangebike.dev/experiences/igoogle/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/igoogle/</guid>
      <description>iGoogle was Google&amp;rsquo;s homepage, and Google&amp;rsquo;s first developer platform (gadget authoring).
Just before the transition to G+, I owned (in a git blame sense) most of the C++ server code for iGoogle. I designed and built its gadget data sharing API, which was also Google&amp;rsquo;s first social API.</description>
    </item>
    
    <item>
      <title>Missle Defense UX</title>
      <link>https://orangebike.dev/experiences/lincoln/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/lincoln/</guid>
      <description>The Reagan Test Site in Kwajalein does e2e testing of missile defense systems.
I led a team building UX for the op center shown above. Dozens of Java SWT widgets (e.g., a radar bore-site view of incoming threats) displayed data from radar and optical sensors. We also built a simulator to drive the displays for training.
I introduced iterative test and release cycles to the group, moving from an unpredictable bi-yearly cycle to bi-weekly, increasing confidence in the ability to fix problems and ship features.</description>
    </item>
    
    <item>
      <title>Eidogen</title>
      <link>https://orangebike.dev/experiences/eidogen/</link>
      <pubDate>Wed, 01 Jan 2003 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/eidogen/</guid>
      <description>Eidogen was a protein structure prediction startup. As second employee, I led the team that built eve, a protein fold and gene sequence explorer. I based it on Java3d, which at the time was the best way to integrate OpenGL and Swing widgets.</description>
    </item>
    
  </channel>
</rss>
