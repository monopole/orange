<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiences on Jeff&#39;s Resume</title>
    <link>https://orangebike.dev/experiences/</link>
    <description>Recent content in Experiences on Jeff&#39;s Resume</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://orangebike.dev/experiences/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kustomize</title>
      <link>https://orangebike.dev/experiences/kustomize/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/kustomize/</guid>
      <description>Kustomize is an open-source cluster configuration management tool for kubernetes.
I founded the project, and led development from nothing to 6500 github stars and over 100 contributors.
In kubernetes, one declares the state of all cluster objects in files, then applies those files to the cluster, where controllers seek to drive objects to their newly desired states. To change the cluster one edits these files and reapplies them. This creates a new problem: how to manage these edits, how to manage hundreds if not thousands of cluster variants.</description>
    </item>
    
    <item>
      <title>Terra Bella</title>
      <link>https://orangebike.dev/experiences/terrabella/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/terrabella/</guid>
      <description>Terra Bella was a small satellite based image service.
I joined Terra Bella (formerly Skybox) after its acquisition by Google. I worked on a service that produced a satellite command stream based on constraints around imaging and communication opportunities. I also worked on orbitology software (orbit prediction from TLEs), integrating it into Google systems. Another role was to inject Google culture involving CI/CD, rollbacks, post-mortems, etc.
Worked for one year on this, before the sale of Terrabella to Planet.</description>
    </item>
    
    <item>
      <title>Vanadium</title>
      <link>https://orangebike.dev/experiences/vanadium/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/vanadium/</guid>
      <description>Vanadium lets distributed services find each other, securely communicate, and delegate authority using public-key cryptography. The project predated service mesh concepts bolted on to kubernetes years later.
I contributed to the libraries and overall project organization, wrote extensive, tested tutorials, and built demos for android, ios and X11. One such demo is volley, a distributed openGL app for iOS, android, osX, X11 in Go that demonstrates vanadium&amp;rsquo;s cross platform power (code).</description>
    </item>
    
    <item>
      <title>Helpouts</title>
      <link>https://orangebike.dev/experiences/helpouts/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/helpouts/</guid>
      <description>Google Helpouts was Google&amp;rsquo;s attempt to turn video chat into a small business platform. If a Google query for How to fix a toilet leak? failed, Google could offer the user a chance to buy time with a human expert, anywhere in the world.
I worked on the android app and the API it talked to, arranged for producer and consumer notifications, and did integration with Google search.
This project offered piano lessons, cooking, vacation advice and medical services in one app.</description>
    </item>
    
    <item>
      <title>G&#43; Games</title>
      <link>https://orangebike.dev/experiences/games/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/games/</guid>
      <description>Google+ Games launched when FarmVille was in its prime.
I was TLM of 5-10 swe/qa/interns, coordinating with extended team of dozens engaged in various aspects of G+ (stream, auth, privacy, and api).
We built the most complex part of the G+ web client, as it had to mitigate the risk of allowing 3rd party apps to run on Google domains. To do so, we launched the first aspect of the G+ API to games developers (contact sharing), preceding what came second (activity stream listing) by over a year.</description>
    </item>
    
    <item>
      <title>iGoogle</title>
      <link>https://orangebike.dev/experiences/igoogle/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/igoogle/</guid>
      <description>iGoogle was Google&amp;rsquo;s homepage, and Google&amp;rsquo;s first developer platform (gadget authoring).
I designed and built its gadget data sharing API (also Google&amp;rsquo;s first social API), and worked on it&amp;rsquo;s C++ stack.</description>
    </item>
    
    <item>
      <title>Missle Defense UX</title>
      <link>https://orangebike.dev/experiences/lincoln/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/lincoln/</guid>
      <description>The Reagan Test Site in Kwajalein does e2e testing of missile defense systems.
I led a team building UX for the op center shown above. Dozens of Java SWT widgets (e.g., a radar bore-site view of incoming threats) displayed data from radar and optical sensors. We also built a simulator to drive the displays for training.
I introduced iterative test and release cycles to the group, moving from an unpredictable bi-yearly cycle to bi-weekly, increasing confidence in the ability to fix problems and ship features.</description>
    </item>
    
    <item>
      <title>Eidogen</title>
      <link>https://orangebike.dev/experiences/eidogen/</link>
      <pubDate>Wed, 01 Jan 2003 00:00:00 +0000</pubDate>
      
      <guid>https://orangebike.dev/experiences/eidogen/</guid>
      <description>Eidogen was a protein structure prediction startup. As second employee, I led the team that built eve, which still seems to be available. I based it on Java3d, which at the time was perfect for integrating large molecule static renders with a desktop app based on Swing.</description>
    </item>
    
  </channel>
</rss>
